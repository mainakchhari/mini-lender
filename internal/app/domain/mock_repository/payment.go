// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/domain/repository/payment.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mainakchhari/mini-lender/internal/app/domain"
)

// MockIPayment is a mock of IPayment interface.
type MockIPayment struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentMockRecorder
}

// MockIPaymentMockRecorder is the mock recorder for MockIPayment.
type MockIPaymentMockRecorder struct {
	mock *MockIPayment
}

// NewMockIPayment creates a new mock instance.
func NewMockIPayment(ctrl *gomock.Controller) *MockIPayment {
	mock := &MockIPayment{ctrl: ctrl}
	mock.recorder = &MockIPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayment) EXPECT() *MockIPaymentMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIPayment) Get(id int) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPaymentMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPayment)(nil).Get), id)
}

// GetNextByLoanId mocks base method.
func (m *MockIPayment) GetNextByLoanId(loanId int) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextByLoanId", loanId)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextByLoanId indicates an expected call of GetNextByLoanId.
func (mr *MockIPaymentMockRecorder) GetNextByLoanId(loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextByLoanId", reflect.TypeOf((*MockIPayment)(nil).GetNextByLoanId), loanId)
}

// Save mocks base method.
func (m *MockIPayment) Save(payment domain.Payment) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", payment)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIPaymentMockRecorder) Save(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIPayment)(nil).Save), payment)
}
